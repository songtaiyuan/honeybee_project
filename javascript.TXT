사용하는 라이브러리 (써브라인 텍스트)

출력 방법
	alert(1);	//경고창에 1 표시
	
	console.log(6/2); 	//경고창 없이 로그에 6/2를 출력
계산법
	Math
	
		Math.pow(3,2);		//3의 2제곱
	
		Math.round(10.6);	//10.6의 반올림
	
		Math.sqrt(9); 		//9의 제곱근
	
		100*Math.ramdom();	//100이하의 임의의 숫자
	
		Math.round(100*Math.ramdom()); //100이하의 정수 (소수점 제거)

typeof ("1");	//데이터 형식 출력

var a = 1; 		//변수 생성

판단문
	if (true){		//if
		alert("true");
	} else {		//else
		alert("false");	
	}
입력문	
	prompt("당신의 나이는?");	//나이 입력창 (프롬프트창)
논리연산
	&& 		//and
	
	||		//or
반복문
	while
		while (조건){
			반복 실핼할 코드;
		}
	
	Hello world; <br />	//html  줄바꿈 
	document.write("Coding everybody <br />"); // javascript 출력
	for
		for
			for(var i = 0; i < 10; i++){
			document.write("Coding everybody "+ i +"<br />");
			} 
		
	break;
	
	continue;
함수
	function
		function 함수명 ( [인자...[,인자]] ){
			코드
			return 반환 값
		}
		함수명();
	
		var 함수명 = ['안녕','하세','요'] //배열
		alert(함수명[0]);
		alert(함수명[1]);
		alert(함수명[2]);

문자열의 변수명.toUpperCase();		//문자열 변수를 대문자로 만들어줌

리스트 관리
	alert(리스트 명.length); 		//배열의 갯수를 출력해줌
	
	리스트 명.push('원하는 값');		//리스트 맨 마지막에 추가해줌
	
	리스트 명.unshuift('원하는 값');	//리스트 맨 앞에 추가해줌
	
	리스트명.splice(인덱스 값,삭제 갯수,넣을값);	//리스트 원하는 위치에 추가해주는 함수
	
	리스트명.shift();		//리스트 첫번째 입력값을 삭제해줌
	
	리스트명.pop();		//리스트 마지막을 입력값을 삭제해줌
	
	리스트명.sort();		//리스트를 순서대로 정렬해줌
		sort(); 함수를 직접 찿아들어가서 원하는 정렬 방식으로 변경이 가능함
	리스트명.reverse();	//리스트를 반 순서대로 정렬해줌

객체
	var grades = ('수학':100, '영어':60, '물리':80); 	//성적 관리표 통한 객체 사용법

	var grades = {}; //빈 객체

	grades ['수학'] = 100; 	//수학이란 값에 100

	grades ['영어'] = 60;		//영어란 값에 60

	grades ['물리'] = 80;		//물리란 값에 80

	grades.물리			//이런식으로 사용

	객체 length 응용 	
		for(var i = 0; i < 리스트 명.length , i++){	//리스트 마지막 까지만 반복하는 함수
			console.log(리스트 명 [i] );
		}
	객체 key 사용법
		var grades = {'egoing' : 10, 'k8805' : 6, 'sorialgi' : 80 } // 객체의 키값을 쓰는법
		for (key in grades) {
			document.write("key : " + key + "value : "+ grades[key] + "<br />");
		}
		for (var name in grades) {
			document.write("key : " + name + "value : "+ grades[name] + "<br />");
		}

	list 에서도 사용가능
		for (var name in arr){
			console.log(name);
		}

	객체에서 담을수 있는
		var grades = {
			'list' : {'egoing' : 10, 'k8805' : 8, 'sorialgi' : 80},
			'show' : function(){
				for(var name in this.list){
				console.log(name, this.list [name]);
				}
			}
		}
		alert(grades['list']['egoing']);		//리스트
		grades['show']();				//함수
		grades.show();

모듈화 
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset ="utf-8"/>
		<script src= "greeting.js"></script>   	//greeting.js 파일을 업로드
	</head>
	<body>
		<script>
			alert(welcome());				//greeting.js 파일 안에 welcome()이란 함수 실행
		</script>
	</body>
	</html>

라이브러리 		jquery

	<!DOCTYPE html>
		<html>
		<head>
			<script type= "text/javascript" src= "jquery.js"></script>   	// jquery 가져오기
		</head>
		<body>
			<ul id="list">
				<li>empty</li>					
				<li>empty</li>
				<li>empty</li>
				<li>empty</li>
			</ul>
			<input type= "button" value= "execute" id= "execute_btn"  />
			<script type= "type= "text/javascript">
				$('#execute_btn').click(function()){		   				//jquery 사용 할때 #					
					$('#list li').text('coding everybody');			   //	list 하위 폴더의 li 텍스트를 모두 변경	
				})
			</script>
		</body>
		</html>

ui 와 api		//user interface 		application programming interface

	레퍼런스 // 안내서
	자바스크립트 래퍼런스		ECMA-262.pdf		생활코딩 api	node.js api 			  google apps script api

정규표현식
	네이버 : <a href= "http://naver.com"></a> 입니다.
		컴파일 	//패턴을 찿는것 
		실행		//어떠한 구체적인것을 하는것
		
		정규표현식 리터럴
			var str = "a";

			var pattern = /a/; 			//찾고자 하는것 대상

		정규표현식 객채 생성자
		
			var pattern = new RegExp('a'); 	//정규표현식 객체

자신이 원하고자 하는 정보가 있는지 --->  검색된 정보를 다른정보로 치환

	RegExp.exec()
		var pattern = /a/;		//
		pattern.exec('');			// 검색하고자 하는 대상을 입력 

		var pattern = /a./;		// . 은 어떤 문자던 간의 하나의 문자
		pattern.exec('');			//만약 찾고자 하는 대상이 없으면 null을 출력

		pattern.test('abcde');		//찾고자 하는 대상이 있으면 true 아니면 false
문자열에서 메소드 사용사는 법 

		var pattern = /a/;
		var str = 'abcdef';
		str.math(pattern);
		str replace(pattern, 'A');		// 패턴의 해당하는 것을 A로 치환

	정규표현식의 옵셥	//대문자와 소문자를 구분하게 하거나 안하게 하는 것
		i		 		
		var oi  = /a/i;			//대문자나 소문자를 구분 하지 않는다
		"Abcd".match(oi);		// 소문자를 찾아도 대문자 또한 검색 해줌
		
		g

		var xg = /a/;
		"abcdea".math(xg);
		var og = /a/g;
		"abcdea".match(og);		// 중복되는 부분 또한 찾아준다

		var ig = /a/ig;			//두가지 옵션을 한번에 사용 가능

	정규표현식의 이해 		//여러가지 도구가 있음
		(\w+)\s(\w+)		// 단어(A~z,0~9) + 띄어쓰기 + 단어(A~z,0~9)

		var str = "coding everybody";

		var result = str.replace(pattern, "$2, $1");	//coding everybody 두 단어의 순서가 변경됨

		console.log(result); 					//everybody coding 

	URL 
		var urlPattern = /\b(?:https?):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*/gim
		var content = '네이버 : http://naver.com 입니다. 생활코딩 : http://openturorials.org/course/1;
		var result = content.replace(urlPattern,function(url){
			return '<a href="'+url+'">'+url+'</a>';
		});
		console.log(result);

유효범위
	scope	//변수의 수명을 의미함 
		var vscope = 'global';
		function fscope(){		
			alert(vscope);
		}
		fscope();
지역변수 //local			전역 변수 //global
	(function(){
		var MYAPP = {}
		MYAPP.calculator = {
			'left' : null,
			'right' : null
		}
		MYAPP.coordinate = {		//이러한 방법을 통해 전역변수의 대한 오류를 예방 (모듈화)
			'left' : null,
			'right' : null
		}
		MYAPP.calculator.left = 10;
		MYAPP.calculator.right = 20;
		function sum(){
			return MYAPP.calculator.left + MYAPP.calculator.right;
		}
		document,write(sum());
	)())

함수 정의
	function a(){}

	a = {
		b:function(){		//함수도 값으로서 정의가 가능하다.  			 여기서 b = key {}내부의 값은 밸류
		}				//속성이라고도 불린다. 내부는 메소드 라고 불린다.
	};

예시 
	function cal (func, num){
		return func (num)
	}
	function increase (num){						//구조 이해
			return num + 1
	}
	function decrease (num){
			return num-1
	}
	alert (cal (increase, 1));
	alert (cal (decrease, 1));

덧셈 뺄셈 	----------------------------------------------------------------
	funotion cal (mode){								//덧셈 뺄셈
		var funcs = {
			'plus' : funotion (left, right){return left + right},
			'minus' : funotion (left, right){return left - right}
			}
			return funcs [mode];
		}
		alert (cal ('plus')(2,1));
		alert (cal ('minus')(2,1));


	var process = [
		funotion (input){ return input + 10;},		//함수 배열 응용  
		funotion (input){ return input * input;},	//퍼스트 클레스 오브젝트
		funotion (input){ return input / 2;},
		];
	var input = 1;
	for (var i = 0; i < process.length; i++){
		input = process[i](input);
	}
	alert(input);

콜백 ---(순서 정렬)-------------------------------------------------------
	<!DOCTYPE html>
	<html>
	<head>
		<title></title>
	</head>
	<body>
	<script type= "text/javascript">
		var numbers = [20,10,9,8,7,6,5,4,3,2,1];
		console.log(number.sort());			//sort()	정렬이 되지만 맨 앞 숫자만 보고 판별함
	</script>
	</body>
	</html>

-------------------------------------------------------------------
		<!DOCTYPE html>
		<html>
		<head>
			<title></title>
		</head>
		<body>
		<script type= "text/javascript">
			var numbers = [20,10,9,8,7,6,5,4,3,2,1];
			var sortfunc = function(a, b){
				console.log(a,b);
				if (a > b){
					return 1;
				}else if (a < b){
					return -1;			//sort()	내부의 값 순서 비교를 하는 기준이
				}else{				//1 , -1 , 0 
					return 0;
				}
			}
			console.log(number.sort(sortfunc));			
		</script>
		</body>
		</html>
-------------------------------------------------------------------	

<!DOCTYPE html>
	<html>
	<head>
		<title></title>
	</head>
	<body>
	<script type= "text/javascript">
		var numbers = [20,10,9,8,7,6,5,4,3,2,1];
		var sortfunc = function(a, b){
			console.log(a,b);
			return a - b;					//더욱 간단한 방법   역순은 b - a;
		}
		console.log(number.sort(sortfunc));			
	</script>
	</body>
	</html>
비동기 처리-------------------------------------------------------------
	Aja
			
